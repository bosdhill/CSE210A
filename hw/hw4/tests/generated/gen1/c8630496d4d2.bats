load ../../harness

@test "c8630496d4d2" {
  check 'while x     -    y  < 2   *  -3 ∨    y+-1    <   y  -  P      do 
  z   :=   -1 -   y    ' '⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ skip; while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}
⇒ z := (-1-y); while (((x-y)<(2*-3))∨((y+-1)<(y-P))) do { z := (-1-y) }, {z → -1}'
}
